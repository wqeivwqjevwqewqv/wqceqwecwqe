_G.BestSheet = "https://sheet.best/api/sheets/18a414a1-e1e5-47bb-8874-b4f609c2d959"
_G.Nexus = true
_G.LogMax = true
_G.Webhook = "https://discord.com/api/webhooks/1027338701656825997/THjDFT85DgynhXKi0dhjxtFgqgZJdIAt9O5G86pgzo8Y_f2B-Jkqa3_t-nIZhEmFlziU"
_G.LOGFPS = true
_G.CHECKAFK = true
_G.WORLD = true
_G.LogBackPack = true
_G.LogInventory = {"Tushita", "Dark Dagger", "Hallow Scythe", "Dark Coat", "True Triple Katana","Cursed Dual Katana"}

task.spawn(function() -- start
    repeat print("WAITING GAME LOAD") wait(1) until game:IsLoaded()
    if not game:IsLoaded() then game.Loaded:Wait() end
    repeat wait() until game.Players
    repeat wait() until game.Players.LocalPlayer
    repeat wait() until game.ReplicatedStorage
    repeat wait() until game.ReplicatedStorage:FindFirstChild("Remotes")
    repeat wait() until game.Players.LocalPlayer:FindFirstChild("PlayerGui")
    repeat wait() until game.Players.LocalPlayer.PlayerGui:FindFirstChild("Main")

        repeat wait()
            if game.Players.LocalPlayer.Team == nil then
                pcall(function()
                    for i, v in ipairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton.Activated)) do
                        v.Function()
                    end
                    
                    for i, v in ipairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton.MouseButton1Click)) do
                        v.Function()
                    end
                end)
                wait(.5)

            end
        until game.Players.LocalPlayer.Team ~= nil and game:IsLoaded() 

        -----------------------------------
warn("SCRIPT LOADED")
-----------------------------------
-- if _G.Nexus then  --load ram setting

    -- spawn(function()
    --     loadstring(game:HttpGet'https://raw.githubusercontent.com/ic3w0lf22/Roblox-Account-Manager/master/RBX%20Alt%20Manager/Nexus/Nexus.lua')() 
    --     Nexus.Commands.performance() 
    --     Nexus.Commands.mute()
    -- end)

-- end
-----------------------------------
local RAMAccount = loadstring(game:HttpGet("https://raw.githubusercontent.com/ic3w0lf22/Roblox-Account-Manager/master/RAMAccount.lua"))()
local MyAccount = RAMAccount.new(game.Players.LocalPlayer.Name)
wait(2)
MyAccount:SetDescription("START")
-----------------------------------
function HopServerKiwwy()
    for timehop=math.random(1,100),1,-1 do
        a = game:GetService("ReplicatedStorage").__ServerBrowser:InvokeServer(timehop)
        -- print(timehop)
        for i,v in pairs (a) do
            print(i,v.Region,v.Count)
            -- if v.Region:find("Singapore") and v.Count <= 7 then
            -- if v.Count <= 7 then
            --     warn(v.Region,v.Count)
                game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, i, game.Players.LocalPlayer)
            -- end
        end
    end
        print("CANT FIND")
    end

-----------------------------------
function World()
    local world

    if game.PlaceId == 2753915549 then
        world = 1
    elseif game.PlaceId == 4442272183 then
        world = 2
    elseif game.PlaceId == 7449423635 then
        world = 3
    end

    return world
end
-----------------------------------
fpslower = 0
function GETFPS()
    if _G.LOGFPS then
        FPS = workspace:GetRealPhysicsFPS()
        if FPS < 15 then
            fpslower = fpslower + 1
            -- print("Fps Low " .. fpslower)
            return ("Low " .. fpslower)
        else
            fpslower = 0
            -- print("Normal " .. fpslower)
            return ("Normal")
        end
    else
        return ""
    end
end

function timestamp()
    return os.date()
end
-----------------------------------
-- disconnect webhook
warn("LOAD WEBHOOK")
function dcwebhook()
    if _G.Webhook ~= nil or _G.Webhook ~= "" then
        local GuiService = game:GetService "GuiService"
        local url = _G.Webhook
        local data = {
            ["content"] = "Disconnect",
            ["embeds"] = {
                {
                    ["title"] = "**Disconnected!**",
                    ["description"] = "Username: ```" ..
                        game.Players.LocalPlayer.Name ..
                            "``` Code: ```" ..
                                GuiService:GetErrorCode().Value ..
                                    "``` Message: ```" .. GuiService:GetErrorMessage() .. "```",
                    ["type"] = "rich",
                    ["footer"] = {
                        ["text"] = "LOG BY KIWWY. | " .. timestamp()
                    },
                    ["color"] = tonumber(0x7269da)
                }
            }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)

        local headers = {
            ["content-type"] = "application/json"
        }
        request = http_request or request or HttpPost or syn.request
        local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
        request(abcdef)
    end
end
-----------------------------------
-- spawn(function() -- fast attack

--     local SuperFastMode = false -- Change to true if you want Super Super Super Fast attack (Like instant kill) but it will make the game kick you more than normal mode
--     local plr = game.Players.LocalPlayer

--     local CbFw = debug.getupvalues(require(plr.PlayerScripts.CombatFramework))
--     local CbFw2 = CbFw[2]

--     function GetCurrentBlade() 
--         local p13 = CbFw2.activeController
--         local ret = p13.blades[1]
--         if not ret then return end
--         while ret.Parent~=game.Players.LocalPlayer.Character do ret=ret.Parent end
--         return ret
--     end
--     function AttackNoCD() 
--         local AC = CbFw2.activeController
--         for i = 1, 1 do 
--             local bladehit = require(game.ReplicatedStorage.CombatFramework.RigLib).getBladeHits(
--                 plr.Character,
--                 {plr.Character.HumanoidRootPart},
--                 60
--             )
--             local cac = {}
--             local hash = {}
--             for k, v in pairs(bladehit) do
--                 if v.Parent:FindFirstChild("HumanoidRootPart") and not hash[v.Parent] then
--                     table.insert(cac, v.Parent.HumanoidRootPart)
--                     hash[v.Parent] = true
--                 end
--             end
--             bladehit = cac
--             if #bladehit > 0 then
--                 local u8 = debug.getupvalue(AC.attack, 5)
--                 local u9 = debug.getupvalue(AC.attack, 6)
--                 local u7 = debug.getupvalue(AC.attack, 4)
--                 local u10 = debug.getupvalue(AC.attack, 7)
--                 local u12 = (u8 * 798405 + u7 * 727595) % u9
--                 local u13 = u7 * 798405
--                 (function()
--                     u12 = (u12 * u9 + u13) % 1099511627776
--                     u8 = math.floor(u12 / u9)
--                     u7 = u12 - u8 * u9
--                 end)()
--                 u10 = u10 + 1
--                 debug.setupvalue(AC.attack, 5, u8)
--                 debug.setupvalue(AC.attack, 6, u9)
--                 debug.setupvalue(AC.attack, 4, u7)
--                 debug.setupvalue(AC.attack, 7, u10)
--                 pcall(function()
--                     for k, v in pairs(AC.animator.anims.basic) do
--                         v:Play()
--                     end                  
--                 end)
--                 if plr.Character:FindFirstChildOfClass("Tool") and AC.blades and AC.blades[1] then 
--                     game:GetService("ReplicatedStorage").RigControllerEvent:FireServer("weaponChange",tostring(GetCurrentBlade()))
--                     game.ReplicatedStorage.Remotes.Validator:FireServer(math.floor(u12 / 1099511627776 * 16777215), u10)
--                     game:GetService("ReplicatedStorage").RigControllerEvent:FireServer("hit", bladehit, i, "") 
--                 end
--             end
--         end
--     end
--     local cac
--     if SuperFastMode then 
--         cac=task.wait
--     else
--         cac=wait
--     end
--     while cac() do 
--         pcall(function()
--         AttackNoCD()
--         end)
--     end

-- end)
-----------------------------------
do -- Connections
    local GuiService = game:GetService "GuiService"
    GuiService.ErrorMessageChanged:Connect(
        function()
            local Code = GuiService:GetErrorCode().Value

            if Code >= Enum.ConnectionError.DisconnectErrors.Value then
                if Code > Enum.ConnectionError.PlacelaunchOtherError.Value then
                    return
                end

                dcwebhook()
            end
        end
    )
end
-----------------------------------
spawn(
    function()
        while _G.CHECKAFK do
            oldpost = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position
            oldlv = game.Players.LocalPlayer.Data.Level.Value
            -- print(oldpost, oldlv)
            warn("AFK CHECK LOADED")
            wait(300)
            newpost = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position
            newlv = game.Players.LocalPlayer.Data.Level.Value
            -- print(oldpost, oldlv)
            -- print(newpost, newlv)
            if oldpost == newpost and oldlv == newlv then
                game.Players.LocalPlayer:Kick("KIWWY AFK CHECK")
                local tpservice = game:GetService("TeleportService")
                local plr = game.Players.LocalPlayer
                tpservice:Teleport(game.PlaceId, plr)
            else
                print("NO AFK")
            end
        end
    end
)
-----------------------------------
function logdescritionfile()
    if _G.Nexus then 
        timenow = tostring(os.date("%d_%m-%H_%M"))
            makefolder("Kiwwy")
            pathfilelog = "./Kiwwy/".."LOG ".. timenow ..".txt"
            writefile(pathfilelog, "")
            logtext = req({
            Url = "http://localhost:7963/GetAccountsJson?Password=Whatever&IncludeCookies=true&Group=Default",
            Method = "GET",
            Headers = {["Content-Type"] = "application/json"},
            
            })
            res = game.HttpService:JSONDecode(logtext.Body)
            -- print(res)
            for i,v in pairs(res) do
                print(i,v.Username , v.Description)
                
                -- lines = {}
                -- for s in v.Description:gmatch("[^\r\n]+") do
                --     table.insert(lines, s)
                -- end
                -- appendfile(pathfilelog, v.Username .. " | " .. table.concat(lines, " | ") .. "\n\n")
                if v.Description == "" then v.Description = "None" end
                appendfile(pathfilelog, v.Username .. " | " .. v.Description .. "\n\n")
                -- for e,w in pairs(v) do
                --     print(e,w)
                -- end
            end
            return warn("Create File Success Fully")
        end
    end
-----------------------------------
logtimevalue = 10
if _G.Nexus then 
    spawn(function() -- create button
        warn("CREATE BUTTON")
        Nexus:CreateLabel('LogSheetLabel', 'SHEET BEST URL')
        Nexus:NewLine()
        Nexus:CreateTextBox('LogSheetText', _G.BestSheet, { 250, 20 }, { 10, 10, 10, 10 })
        Nexus:NewLine()
        Nexus:CreateButton('LogSheetButton', 'LogSheet', { 100, 20 }, { 10, 10, 10, 10 })
        Nexus:OnButtonClick('LogSheetButton', function() print('press log') logsheet() end)
        Nexus:NewLine()

        Nexus:CreateNumeric('LogTimeText', 10,0,1)

        Nexus:CreateLabel('MiscLabel', 'Misc.')
        Nexus:NewLine()

        Nexus:CreateButton('LogDescriptionText', 'Log Des text', { 100, 20 }, { 10, 10, 10, 10 })
        Nexus:OnButtonClick('LogDescriptionText', function() logdescritionfile() end)

        Nexus:CreateButton('Shutdownbutton', 'Shutdown', { 100, 20 }, { 10, 10, 10, 10 })
        Nexus:OnButtonClick('Shutdownbutton', function() game:Shutdown() end)

        Nexus:CreateButton('RejoinButton', 'Rejoin', { 100, 20 }, { 10, 10, 10, 10 })
        Nexus:OnButtonClick('RejoinButton', function() local TeleportService = game:GetService'TeleportService' TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId) end)
    end)
end


-----------------------------------
if _G.Nexus then 
    _G.CheckNexusValue = true
    spawn(function()
        while _G.CheckNexusValue do
            Nexus:CreateTextBox('LogSheetText', _G.BestSheet, { 250, 20 }, { 10, 10, 10, 10 })
            Nexus:CreateNumeric('LogTimeText', 10,0,1)
            oldsheetvalue = (Nexus:GetText('LogSheetText'))
            oldlogtimevalue = (Nexus:GetText('LogTimeText'))
            wait(5)
            Nexus:CreateTextBox('LogSheetText', _G.BestSheet, { 250, 20 }, { 10, 10, 10, 10 })
            Nexus:CreateNumeric('LogTimeText', 10,0,1)
            sheetvalue = (Nexus:GetText('LogSheetText'))
            logtimevalue = (Nexus:GetText('LogTimeText'))
            -- print(sheetvalue , logtimevalue)
            if oldsheetvalue ~= sheetvalue then
                warn("CHANGE NOW SHEET URL: " .. sheetvalue)
                _G.BestSheet = sheetvalue
            end
            if oldlogtimevalue ~= logtimevalue then
                warn("CHANGE NOW LOG TIME: " .. logtimevalue .. " Second")
                logtimevalue = tonumber(logtimevalue)
            end
        end
    end)
end
-----------------------------------
function checkmelee()
    melee = {}
    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySuperhuman",true) == 1 then
       table.insert(melee, "Superhuman")
    end
    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDragonTalon",true) == 1 then
       table.insert(melee, "DragonTalon")
    end
    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyElectricClaw",true) == 1 then
       table.insert(melee, "ElectricClaw")
    end
    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate",true) == 1 then
       table.insert(melee, "SharkmanKarate")
    end
    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDeathStep",true) == 1 then
       table.insert(melee, "DeathStep")
    end
    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyGodhuman",true) == 1 then
       table.insert(melee, "Godhuman")
    end
 
    realmelee = table.concat(melee, ", ")
    if unpack(melee) == nil then
        realmelee = "None"
    end
    return tostring(realmelee)
 end
-----------------------------------
function checkmeleelog()
    Item_Punch = {}
    local Punch_Sup = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySuperhuman",true)
    local Punch_Dragon = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDragonTalon",true)
    local Punch_Ele = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyElectricClaw",true)
    local Punch_Shark = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate",true)
    local Punch_Death = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDeathStep",true)
    local Punch_God = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyGodhuman",true)

    if Punch_Sup == 1 then
        table.insert(Item_Punch,"Superhuman")
    end
    if Punch_Dragon == 1 then
        table.insert(Item_Punch,"DragonV2")
    end
    if Punch_Ele == 1 then
        table.insert(Item_Punch,"ElectricV2")
    end
    if Punch_Shark == 1 then
        table.insert(Item_Punch,"SharkMan")
    end
    if Punch_Death == 1 then
        table.insert(Item_Punch,"DeathStepV2")
    end
    if Punch_God == 1 then
        table.insert(Item_Punch,"Godhuman")
    end





    realmeleelog = table.concat(Item_Punch, ", ")
    if unpack(Item_Punch) == nil then
        realmeleelog = "None"
    end
    return tostring(realmeleelog)
end
-----------------------------------
function inventory()
    nah = {}
    if type(_G.LogInventory) ~= "table" then _G.LogInventory = {} end

    for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
        -- if v.ToolTip == "Sword" then
        --     if v.Rarity.Value >= 4 then
        --         table.insert(nah,v.Name)
        --         print(v.Name)
        --     end
        --     end

        for v1 , weaponcheck1 in pairs(_G.LogInventory) do
            if v.Name == weaponcheck1 and v.ToolTip == "Sword" or v.Name == weaponcheck1 and v.ToolTip == "Wear" or v.Name == weaponcheck1 and v.ToolTip == "Gun" then
                table.insert(nah,v.Name)
            end
        end
    end
        
    for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do pcall(function()
        -- if v.ToolTip == "Sword" then
        --     if v.Rarity.Value >= 4 then
        --         table.insert(nah,v.Name)
        --         print(v.Name)
        --     end
        -- end

        for v2 , weaponcheck2 in pairs(_G.LogInventory) do
            if v.Name == weaponcheck2 and v.ToolTip == "Sword" or v.Name == weaponcheck2 and v.ToolTip == "Wear" or v.Name == weaponcheck2 and v.ToolTip == "Gun" then
                table.insert(nah,v.Name)
            end
        end
    end)
    end

    if unpack(_G.LogInventory) ~= nil then
        for i,v in pairs (game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("getInventoryWeapons")) do
            for w,e in pairs (_G.LogInventory) do
                if v.Name == tostring(e) then
                    table.insert(nah,e)
                end
            end
        end
    end
    -- for i,v in pairs (game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("getInventoryWeapons")) do

    --     if v.Rarity >= 4 then
    --         print(v.Name , v.Type)
    --         table.insert(nah,v.Name)
    --     elseif v.Type == "Wear" and v.Rarity >= 4 then
    --         print(v.Name , v.Type)
    --         table.insert(nah,v.Name)
    --     end
    -- end
    if unpack(nah) == nil then
        table.insert(nah, "None")
    end

    realinv = table.concat(nah, ", ")
    return tostring(realinv)
    
end
-----------------------------------
function reformatmoney(n)
    if n >= 10^6 then
        return string.format("%.2f M", n / 10^6)
    elseif n >= 10^3 then
        return string.format("%.2f K", n / 10^3)
    else
        return tostring(n)
    end
end
-----------------------------------
function GetMoney()
    return reformatmoney(game.Players.LocalPlayer.Data.Beli.Value)
end
-----------------------------------
function GetFragment()
    return reformatmoney(game.Players.LocalPlayer.Data.Fragments.Value)
end
-----------------------------------
req = request or syn.request
function logsheet()
    _G.LogAcc = false
    local RAMAccount = loadstring(game:HttpGet("https://raw.githubusercontent.com/ic3w0lf22/Roblox-Account-Manager/master/RAMAccount.lua"))()
    local MyAccount = RAMAccount.new(game.Players.LocalPlayer.Name)
    local data = {
          ["Account"] = game.Players.LocalPlayer.Name,
          ["Level"] = game.Players.LocalPlayer.Data.Level.Value,
          ["Melee"] = checkmeleelog(),
          ["Inventory"] = inventory(),
          ["Fruit"] = tostring(FruitLog1Line),
          ["RareFruit"] = rarefruitinventory(),
          ["World"] = World(),
          ["Money"] = tostring(reformatmoney(game:GetService("Players").LocalPlayer.Data.Beli.Value)),
          ["Fragment"] = tostring(reformatmoney(game:GetService("Players").LocalPlayer.Data.Fragments.Value)),
          ["Race"] = game:GetService("Players").LocalPlayer.Data.Race.Value,

          
          
          
          
    }
    sheetbestreq = req({
          Url = _G.BestSheet,
          Method = "POST",
          Headers = {["Content-Type"] = "application/json"},
          Body = game.HttpService:JSONEncode(data)
    })
    print(sheetbestreq.Body , sheetbestreq.StatusCode)
    local RAMAccount = loadstring(game:HttpGet("https://raw.githubusercontent.com/ic3w0lf22/Roblox-Account-Manager/master/RAMAccount.lua"))()
    local MyAccount = RAMAccount.new(game.Players.LocalPlayer.Name)
    if sheetbestreq.StatusCode == 200 then
        MyAccount:SetAlias("true")
        _G.WORLD = false
        _G.LogMax = false
        wait(5)
        game:shutdown()
    else
        MyAccount:SetAlias("false " .. sheetbestreq.Body)
        _G.WORLD = false
        _G.LogMax = false
    end
    -- print(sheetbestreq.Body)
    
    
 end
-----------------------------------
function FruitLogSheet()
    FruitLogger = game:GetService("Players").LocalPlayer.Data.DevilFruit.Value
    if game:GetService("Players").LocalPlayer.Data.DevilFruit.Value ~= '' then
        UseFruitLogger = game.Players.LocalPlayer.Backpack:FindFirstChild(Fruit) or game.Players.LocalPlayer.Character:FindFirstChild(Fruit)
        ValueFruitLogger = UseFruitLogger.Level.Value
        return tostring(Fruit:match("%-(.+)"))
    else
        return "None"
    end
end
-----------------------------------
awakenumcheck = 0
data_awakenumcheck = 0
function FruitLog()
    if game:GetService("Players").LocalPlayer.Data.DevilFruit.Value ~= '' then
        Fruit = game:GetService("Players").LocalPlayer.Data.DevilFruit.Value
        UseFruit = game.Players.LocalPlayer.Backpack:FindFirstChild(Fruit) or game.Players.LocalPlayer.Character:FindFirstChild(Fruit)
        ValueFruit = UseFruit.Level.Value
        -- print(UseFruit , ValueFruit)
        CanAwake = UseFruit:FindFirstChild("AwakenedMoves")
        awaked = {}
        if CanAwake then
            -- print("Can Awake this")
            SkillValue = require(UseFruit.Data).Awakening.Fragments
            for i,v in pairs(SkillValue) do 
                data_awakenumcheck = data_awakenumcheck + 1               
           end

            for i,v in pairs(UseFruit.AwakenedMoves:GetChildren()) do
                awakenumcheck = awakenumcheck + 1
                -- print(v.Name)
                table.insert(awaked,v.Name)
            end
            if awakenumcheck == data_awakenumcheck then
                _G.AwakenAll = true
            end
            -- print(unpack(awaked))
            -----------------------------------
            
        else
            cant_awake = true
            -- print("Cant Awake this")
            table.insert(awaked, "This Fruit Cant Awake")
        end

        RealAwake = table.concat(awaked, ", ")
        if unpack(awaked) == nil then
            RealAwake = "None"
        end
        FruitLog1Line = tostring(tostring(FruitLogSheet()) .. " ( M: " .. tostring(ValueFruit) .. " | " .. "A: " .. tostring(awakenumcheck) .. " )")

        AllFruitLine = tostring(tostring(UseFruit) .. " ( Mastery: " .. tostring(ValueFruit) .. " )" .. "\n"  .. "Awake: " .. tostring(RealAwake))
    else
        AllFruitLine = "None"
    end
    
    return tostring(AllFruitLine)
end
-----------------------------------
function rarefruitinventory()
    fruitrare = {}
    for i,v in pairs(game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("getInventoryFruits"))do
        if v.Price >= 1000000 then
            -- print(v.Name)
            table.insert(fruitrare, v.Name:match("%-(.+)"))
        end
        
    end
        if unpack(fruitrare) == nil then
            table.insert(fruitrare, "None")
        end
        realfruitrare = table.concat(fruitrare, ", ")
        return tostring(realfruitrare)
end
-----------------------------------
local UGS = UserSettings():GetService'UserGameSettings'
UGS.MasterVolume = 0
-----------------------------------
_G.AwakenAll = false
_G.LogAcc = true
while _G.LogAcc do
    local RAMAccount = loadstring(game:HttpGet("https://raw.githubusercontent.com/ic3w0lf22/Roblox-Account-Manager/master/RAMAccount.lua"))()
    local MyAccount = RAMAccount.new(game.Players.LocalPlayer.Name)
    LogBackPackValue = ''
    if _G.LogBackPack then
        LogBackPackValue = "\n" .. "Melee: " .. tostring(checkmelee()) .. "\n" .. "Inventory: " .. tostring(inventory()) .. "\n" .. "Rare Fruit: " .. rarefruitinventory() .. "\n" .. "Fruit: " .. FruitLog() 
        .. "\n" .. "Money: " .. tostring(GetMoney()) .. "\n" .. "Fragment: " .. tostring(GetFragment())  
    end
    if _G.WORLD then
        MyAccount:SetAlias("World: " .. World())
        warn("LOG WORLD")
    end
        MyAccount:SetDescription("Level: " .. game.Players.LocalPlayer.Data.Level.Value .. " " .. tostring(GETFPS()) .. " " .. tostring(LogBackPackValue))
        warn("LOG DES")
    if _G.LogMax then
        if game.Players.LocalPlayer.Data.Level.Value == 2400 and _G.AwakenAll then
            MyAccount:SetAlias("Awaken & Max Lv.")
            _G.WORLD = false
        end
    end
    if fpslower >= 6 then
        print(MyAccount:SetDescription("FPS LOW REJOIN..."))
        -- local TeleportService = game:GetService "TeleportService"
        -- TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId)
        HopServerKiwwy()
    end
    warn("LOG WAIT: " .. logtimevalue)
    wait(tonumber(logtimevalue))
end
end) -- end task.spawn()
